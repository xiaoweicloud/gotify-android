name: Auto Tag and Release

# 仅在推送到主分支时触发（避免循环触发）
on:
  push:
    branches: [ main ]
    paths:
      - 'app/build.gradle'  # 只有版本文件变更时才触发，可选

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许创建标签和推送
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取所有历史，用于标签检查

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 从build.gradle提取版本号（关键步骤）
      - name: Extract version name from build.gradle
        id: extract_version
        run: |
          # 从app模块的build.gradle中读取versionName
          VERSION_NAME=$(grep "versionName" app/build.gradle | awk -F '"' '{print $2}')
          echo "提取到版本号: $VERSION_NAME"
          echo "version=$VERSION_NAME" >> $GITHUB_OUTPUT

      # 检查标签是否已存在
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG="v${{ steps.extract_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "标签 $TAG 已存在"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "标签 $TAG 不存在，准备创建"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # 自动创建并推送标签（仅当标签不存在时）
      - name: Create and push tag
        if: ${{ steps.check_tag.outputs.exists == 'false' }}
        run: |
          TAG="v${{ steps.extract_version.outputs.version }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "已创建并推送标签: $TAG"

      # 构建项目（始终执行，确保代码可构建）
      - name: Build project
        run: ./gradlew build --stacktrace

      # 准备发布包（仅当标签是新创建时）
      - name: Prepare release assets
        if: ${{ steps.check_tag.outputs.exists == 'false' }}
        run: |
          export RELEASE_STORE_FILE=$(pwd)/gotfy-release-key.jks
          echo $RELEASE_KEY | base64 -d > $RELEASE_STORE_FILE
          ./gradlew -Psign build --stacktrace
          
          # 用版本号命名APK
          VERSION="${{ steps.extract_version.outputs.version }}"
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Gotify-v$VERSION.apk
        env:
          RELEASE_KEY: ${{ secrets.RELEASE_KEY }}
          RELEASE_STORE_PASSWORD: ${{ secrets.STOREPASS }}
          RELEASE_KEY_ALIAS: gotify-release-key
          RELEASE_KEY_PASSWORD: ${{ secrets.KEYPASS }}

      # 自动发布到Releases（仅当标签是新创建时）
      - name: Publish to Releases
        if: ${{ steps.check_tag.outputs.exists == 'false' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: app/build/outputs/apk/release/Gotify-v${{ steps.extract_version.outputs.version }}.apk
          asset_name: Gotify-v${{ steps.extract_version.outputs.version }}.apk
          tag: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          body: "Automated release for version v${{ steps.extract_version.outputs.version }}"
          overwrite: true
          prerelease: false
