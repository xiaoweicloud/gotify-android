/*
 * Gotify REST-API.
 * This is the documentation of the Gotify REST-API.  # Authentication In Gotify there are two token types: __clientToken__: a client is something that receives message and manages stuff like creating new tokens or delete messages. (f.ex this token should be used for an android app) __appToken__: an application is something that sends messages (f.ex. this token should be used for a shell script)  The token can be transmitted in a header named `X-Gotify-Key`, in a query parameter named `token` or through a header named `Authorization` with the value prefixed with `Bearer` (Ex. `Bearer randomtoken`). There is also the possibility to authenticate through basic auth, this should only be used for creating a clientToken.  \\---  Found a bug or have some questions? [Create an issue on GitHub](https://github.com/gotify/server/issues)
 *
 * OpenAPI spec version: 2.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.gotify.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * The Client holds information about a device which can receive notifications (and other stuff).
 */
@Schema(description = "The Client holds information about a device which can receive notifications (and other stuff).")


public class Client {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("lastUsed")
  private OffsetDateTime lastUsed = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("token")
  private String token = null;

   /**
   * The client id.
   * @return id
  **/
  @Schema(example = "5", required = true, description = "The client id.")
  public Long getId() {
    return id;
  }

   /**
   * The last time the client token was used.
   * @return lastUsed
  **/
  @Schema(example = "2019-01-01T00:00Z", description = "The last time the client token was used.")
  public OffsetDateTime getLastUsed() {
    return lastUsed;
  }

  public Client name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The client name. This is how the client should be displayed to the user.
   * @return name
  **/
  @Schema(example = "Android Phone", required = true, description = "The client name. This is how the client should be displayed to the user.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * The client token. Can be used as &#x60;clientToken&#x60;. See Authentication.
   * @return token
  **/
  @Schema(example = "CWH0wZ5r0Mbac.r", required = true, description = "The client token. Can be used as `clientToken`. See Authentication.")
  public String getToken() {
    return token;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Client client = (Client) o;
    return Objects.equals(this.id, client.id) &&
        Objects.equals(this.lastUsed, client.lastUsed) &&
        Objects.equals(this.name, client.name) &&
        Objects.equals(this.token, client.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lastUsed, name, token);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Client {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUsed: ").append(toIndentedString(lastUsed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
